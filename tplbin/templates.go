// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/conds.tpl
// templates/dao.tpl
// templates/table.tpl
package tplbin

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _condsTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x41\x8f\x9b\x3c\x14\x3c\xc7\xbf\x62\xbe\xe8\xd3\x2a\x44\x89\xb9\x57\xca\xa1\x5d\xf5\xd0\xcb\xaa\x52\xb7\xa7\xaa\xaa\x1c\xfc\x60\xad\x05\x9b\xb5\x4d\x57\x11\xcb\x7f\xaf\x6c\x20\x1b\x68\xb7\x44\xe5\x64\x1b\x7b\x3c\x33\x9e\xf7\xd2\x14\xf7\x0f\xca\x21\x57\x25\xe1\x59\x38\x14\xa4\xc9\x0a\x4f\x12\xc7\x13\x0a\xb3\x97\xc2\xec\x33\x23\x69\x5f\x90\xde\x81\xa5\x29\x4e\xa6\x41\x26\x34\x2a\x23\x55\x7e\x82\xf2\xf0\x06\x47\x42\x65\x2c\xc1\x35\xca\x8b\x63\x49\x1c\x8c\xd5\x22\x7b\x14\x05\xa1\x6d\xc1\x3f\x3f\x16\xe8\x3a\x16\xce\x87\xe9\x7d\xd8\xf3\xb5\xae\xc9\xde\x8a\x8a\xca\x4f\x92\xb4\x47\xd7\xdd\x1a\x2d\x1d\x5c\x4d\x99\xca\x15\x39\xf8\x07\x42\x66\xb4\x54\xde\xe8\x48\x51\x3a\x98\x1c\xfd\x0d\xcc\x9f\x6a\xba\x02\xcd\xdb\x26\xf3\x68\x59\xdb\xee\x61\x85\x2e\x08\xfc\xbd\xf7\xd6\x05\x3e\x18\xbe\x80\x72\x27\x2a\x42\xd7\x61\x1b\x21\x03\x76\xd7\x85\x1f\x2a\x07\xbf\x35\x55\xd5\x83\x0e\x02\x5e\x17\x10\x70\x49\xcb\x30\x64\xaf\x63\x76\x95\xd8\xb9\xd6\xd2\xb8\xc6\x12\xf2\x46\x67\x5e\x19\x1d\xc4\xf6\xfa\x95\xd1\xee\x3a\xc5\xf1\xf0\x66\xbb\xe4\x4b\x12\xe9\xdd\xd1\xf3\xa2\x81\x96\x7c\x63\x35\x44\x64\xe2\x40\xda\x2b\x7f\x0a\xe9\x38\x33\x3b\xf3\x75\x28\x95\xf3\x9c\x85\xf9\x35\xd8\x9b\x1e\x92\x73\xbe\xb0\x33\x59\x7e\xe7\x96\xad\x7e\x0a\x0b\xb3\xb8\x93\xad\x72\x63\xf1\x63\x17\xf9\xe3\xdd\x61\x08\x45\x36\xa2\xac\xc2\x68\x73\x63\x12\xb6\xea\xd8\x6a\x50\x6f\xc2\x7b\xfe\x29\x41\x69\x8a\x2f\xe4\xdb\x16\xff\xbf\x75\xe9\x98\xad\xc9\xe2\x85\xab\xf3\x37\x0f\xec\x5e\xad\x35\x3a\x26\x23\x57\x54\xca\xc1\xd8\x7f\xb9\x6f\x33\x59\x1d\x92\x3d\xa6\x3c\xba\xfb\x26\x5e\x0c\x55\x7b\x76\x22\xc6\xcb\xc4\x2a\xf9\xeb\x11\x97\x44\x33\x0d\xbf\xac\xad\x03\x6e\xe6\x44\x82\xcb\xd1\xdb\xb1\x70\x7a\x91\x1f\x1a\x55\xca\xc5\xfc\xb8\xa7\x32\xd2\xdb\xba\xa7\xf2\x18\x4e\x90\xe5\x61\x61\x37\x3c\xe7\x72\x19\x60\x23\x6c\xe1\xf0\xed\xbb\xf3\x56\xe9\x22\x90\x0e\x0d\x41\xe5\x18\xb1\x0f\x07\x68\x55\xe2\xe5\x65\xc0\x1c\xe6\xed\xb9\x79\xf4\xc6\xc4\x69\xdf\x51\xe6\x39\x99\x34\x9a\x7d\xc0\xd6\x34\x98\xbf\xf6\xaa\x22\x7e\xaf\x2a\x5a\xc7\x06\x82\x8b\x4f\xf5\xc5\xef\x26\x0e\xfe\x37\xbf\x7d\xfc\xa2\x8c\x03\x44\x5d\x93\x96\x51\xd4\x6e\x94\xc0\x3f\x3e\x35\xa2\xdc\xac\x7b\x33\x42\x23\x5e\xef\xb0\xfd\x0d\x3b\x49\x26\xa0\x53\xd2\xc3\xe3\xcc\xa6\x63\x28\xc2\x75\xac\x63\xbf\x02\x00\x00\xff\xff\x9d\x41\x83\x4a\x4e\x06\x00\x00"

func condsTplBytes() ([]byte, error) {
	return bindataRead(
		_condsTpl,
		"conds.tpl",
	)
}

func condsTpl() (*asset, error) {
	bytes, err := condsTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conds.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _daoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\xaa\x93\xe4\x75\xe4\xe4\x54\x60\x77\x75\x68\x92\xdd\x45\xd0\x36\x29\x10\xb7\x28\x10\x04\x0b\x5a\x1a\x32\x83\x50\xa4\x42\xd2\x4e\xdc\xc0\xff\xbd\x20\x29\xd9\x8a\xe3\x34\x7b\x6b\x0e\xb1\x35\x1f\x6f\x3e\x1e\x1f\xe5\xd9\x0c\xe6\x77\x64\x81\x93\x44\x78\x64\x16\x04\x2a\x34\xcc\x61\x03\x8b\x35\x08\x7d\xd4\x30\x7d\x54\xeb\x06\x8f\x04\xaa\x34\xed\x58\x7d\xcf\x04\xc2\xf3\x33\x94\x7f\xdc\x0b\xd8\x6c\xd2\x94\xda\x4e\x1b\x07\x79\x9a\x64\xb5\x56\x0e\x9f\x5c\x96\x26\x19\x1a\xa3\x8d\xf5\xdf\x0c\x72\x89\x75\x30\x5a\x67\x48\x09\x9b\xa5\x00\x00\x59\xc3\x1c\x5b\x30\x8b\x33\xfb\x20\xb3\x34\x4d\x32\x41\xee\x6e\xb9\x28\x6b\xdd\xce\xd6\x4c\x09\xcb\xe8\xe7\x99\xd0\x47\xed\x3a\x04\xbc\xe9\xb7\x0f\x72\xb1\x24\xd9\xa0\xc9\xd2\x22\x4d\x6b\xad\xac\x6f\xc7\xd7\x98\xcd\xe0\xfa\x8e\x35\xfa\xf1\xcc\x3d\xfd\x8a\x6b\xb0\x1d\xd6\xc4\x09\x2d\xd8\x60\x06\x6a\x50\x39\x72\x6b\x20\x05\x7d\xf7\x65\x9a\xbc\xcc\x09\x4d\x43\x05\xd9\xdf\x47\xd1\x91\x0d\xd8\x5f\xb5\xa9\xf1\x77\x66\x1d\x9a\x8b\x00\x34\x2a\xc0\xbd\x0f\xda\xe0\x04\xc7\x84\xaf\x60\x1f\x24\xd4\xba\x6d\x51\xb9\x32\x60\x1c\x00\xd8\x56\x9b\x4d\x02\xc4\xf7\x08\x31\x99\x41\x98\x6e\xc5\x8c\x5f\xb5\x90\x7a\xc1\xe4\xf9\xa9\x07\x81\x89\x7d\x90\xe5\xf9\xa9\x77\xcf\x66\x70\xa1\xc8\x9d\x33\x0d\xa4\xc8\x11\x93\xf4\x0f\xc2\xb0\x69\x3f\xa2\xc2\xda\x91\x56\xc0\x54\x03\xac\x69\x7c\xb1\x7e\x17\x2d\xeb\x3a\x52\xa2\x4c\xf9\x52\xd5\x03\x4c\x5e\xbb\xa7\xed\x66\xce\xe2\xe7\x14\x6a\x2e\x60\x12\x78\xf1\x36\x4e\xa2\x80\x1c\x8d\x81\xc0\x7a\x01\xcf\x61\x38\xe2\x21\xae\xaa\x40\x91\xec\x6d\xfe\xcf\x07\x56\x31\xd4\x96\x97\xf8\x98\x67\x01\xc9\x57\xe1\x24\x80\xac\x8f\xcf\x8a\x6d\xbc\x41\xb7\x34\x2a\x3c\x6e\xc2\xff\x7e\x0a\x6d\xa6\x01\xeb\x63\x05\xb1\x95\x4b\x7c\x3c\x1b\x5c\x79\xcd\x45\x31\xb4\xe1\xa3\x7e\xda\x6f\xe3\x05\xec\x6e\xa1\x95\x67\xa9\xbc\xea\x50\x9d\x9f\xe6\xdb\x4a\x45\x9a\xf4\xf1\x9b\xb0\xe4\x33\xa9\x2d\x82\xbb\x7b\xb1\xd2\x4e\x6b\x39\x85\xa5\x45\xcf\xb5\xf7\xb5\x8c\x14\xf8\x6d\x06\xf7\x8a\x18\x34\xc8\xd1\xf4\x1b\x0e\x18\xf9\x68\x5b\xdb\x1e\x5e\xf5\x3a\x78\xca\x3e\xa7\xef\x7a\xb3\x25\x7c\xce\x16\x12\xbf\x12\xca\xc6\x8e\x89\xe7\x48\xb2\x01\xc5\x5a\xb4\x20\xc9\x3a\xe0\x46\xb7\xe0\x7c\x30\xc4\x83\x5f\x02\xec\xf8\x1e\xa1\xe4\x2b\x20\xe5\xd0\x70\x56\xe3\xf3\x66\x0a\x3c\x62\x4f\x6e\x6e\xe3\x09\xf5\x6d\x27\xce\xef\xbe\xd7\x77\x39\x5f\x77\x78\xc5\xf3\x55\x91\x26\x93\x3e\xba\x82\x96\xdd\x63\x3e\xe4\x4c\xe1\x78\x0a\xae\xbc\x5c\xb6\xa1\x46\x5e\x14\x69\xe2\xcf\x73\x88\xbe\x64\x2d\xf6\xa7\x3f\x4d\xb8\x36\x40\x1e\xfc\xf8\x13\x10\x7c\x7e\x91\xf4\x09\xe8\xc3\x07\x5f\x3d\xf1\xaa\xfa\x58\x81\x2b\xa3\x87\x8a\x72\xce\x44\xf9\x0d\x5d\x9e\x35\x8b\xac\x48\x93\x64\x87\x5c\xf5\xd8\xb6\xbc\xee\x24\xb9\xdc\x31\x31\x85\x6c\x9a\x15\x37\xc7\xb7\x69\x92\x10\x1f\x75\x51\x55\x90\x65\xa1\x42\xe2\x4f\x3e\xa9\x25\xa6\x49\xb2\x49\x93\xd1\x60\xac\xeb\x50\x35\x79\x6f\x98\x6e\xd1\xe7\x86\xda\xeb\x8e\xd5\x98\x6f\xf1\xfc\x98\xaf\xb8\xfa\xb3\x6b\x98\x1b\x18\xbb\xd8\x31\xd6\xea\x86\x38\x05\x82\x02\x40\x4f\xde\x01\xde\xf6\x68\x1b\x03\xbe\x41\x5e\xcb\xba\x9b\xd8\xa7\x27\x64\x59\xbb\xe7\x4d\xa0\x71\x18\xde\xee\xb4\x9a\x24\x1d\x53\x54\xe7\xd9\x32\xc0\x0e\x7e\xa5\xdd\x70\xbc\xa0\x33\xba\x43\xe3\xd6\x59\x18\x2f\xea\x52\x5a\x4f\xc8\xee\x42\xf6\x92\xbc\x0e\xa5\xf2\x55\x51\x9e\x69\xb9\x6c\x95\xfd\xaa\xcd\x9c\x89\x01\xba\x17\xba\x67\xfc\xfb\xd4\x43\x84\x33\xc5\x94\xc0\x88\xb7\x13\x41\xec\xe1\xa6\xd6\xf2\x36\xd2\x19\x26\x78\xde\x1c\x16\xc3\x55\x4b\xee\x4b\xdb\xb9\xf5\xeb\x1d\xeb\x96\x1c\x7a\xd7\x3b\x2b\xde\xdb\xf0\x1e\xe2\xff\xb0\xe4\x37\x05\xf7\x63\x7a\x39\x3f\x9d\xbf\xab\x18\xdd\xb9\xc8\xe1\x0b\xb5\x84\xcc\xa8\x17\xaf\xaa\xc8\x95\xee\xdc\x8e\xab\x90\x17\x24\x43\xfc\x80\x18\x74\xe7\x8a\xa0\xab\xed\xee\x7b\x81\x25\x3d\xab\x3e\xff\xe6\xf8\x76\x8f\xd9\x24\xca\x6e\x73\x40\x40\xbf\x48\x62\xf6\xf5\x8d\xc7\xbc\x19\x34\x8f\x57\xdf\x0f\xb0\x1a\x70\xf6\xb9\x8c\x28\x23\x53\xa0\xd0\xbc\xb5\x7e\xb3\x1a\x3b\xfe\x62\x72\xe9\x3d\x01\xe4\x00\x39\xe6\x1d\x76\xcc\x7f\xd0\xe3\x98\x78\x97\x1e\xe2\x20\x51\xf9\x1b\xce\x16\xf0\x19\x4e\x0e\xde\x64\x66\x55\x7e\x91\xd8\xe6\x45\xac\x75\xba\xf6\x37\x55\x3e\x2e\x1d\xae\xae\xf2\x1a\xdd\x75\xa8\x15\xf0\x6e\x8e\x6f\x47\x97\xd9\x37\x74\x57\x9c\x5b\x74\x20\xd0\x41\xc7\x04\x29\x16\xde\x74\x3a\x58\xfb\x4d\x6f\xa3\xf2\x8e\x09\xbc\x50\x0d\x3e\xf9\xcd\x4e\x7d\x02\xfe\x46\x2d\xf9\xd3\xee\x0a\xc8\x63\x56\x7c\xd8\xbe\x13\x77\x41\x71\x92\xe1\x32\xd8\xd9\x2b\x38\x39\x1e\xfd\x38\xe8\x73\x62\x9d\xd7\x39\xd1\x5e\xc1\xc9\x28\x25\xbe\xd9\x61\xd4\xdf\x11\x9c\x14\x30\xd9\x15\x49\x37\xe9\xbf\x01\x00\x00\xff\xff\x45\x24\x43\x82\x2a\x0b\x00\x00"

func daoTplBytes() ([]byte, error) {
	return bindataRead(
		_daoTpl,
		"dao.tpl",
	)
}

func daoTpl() (*asset, error) {
	bytes, err := daoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dao.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tableTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xdc\x36\xf2\x7f\x2d\x7d\x8a\xa9\x80\x7f\x20\xf5\xbf\xd6\xa6\xc0\xe1\x0e\x70\xcf\x05\x1c\x27\xed\x05\x48\x93\xdc\xa5\xbd\x03\x2e\x08\x5a\x4a\x1c\xad\x79\x91\xc8\x35\x49\xc5\x5e\x6c\xf5\xdd\x0f\x7c\xd0\xd3\x7a\x57\x5a\xdb\x69\x90\x2b\xb2\x2f\x12\x8b\xe2\x0c\x67\x86\x33\xbf\x99\x21\xb5\x5c\xc2\x4f\x97\x4c\x41\xc1\x4a\x84\x6b\xa2\x60\x85\x1c\x25\xd1\x48\x21\xdb\xc0\x4a\x9c\x50\x22\x4e\x72\x41\xf1\x64\x85\x7c\x01\xe1\x72\x09\x1b\x51\x43\x4e\x38\x54\x82\xb2\x62\x03\x4c\x83\x16\x90\x21\x54\x42\x22\xa8\x9a\x69\x92\x95\x98\x42\x18\xae\x49\xfe\x9e\xac\x10\xb6\x5b\x48\x5f\xbf\x5f\x41\xd3\x84\x21\xab\xd6\x42\x6a\x88\xc3\x20\xca\x05\xd7\x78\xa3\xa3\x30\x88\x50\x4a\x21\x95\xf9\x4b\xb3\x0a\xa3\x10\x00\x20\x2a\x2a\x1d\x85\x61\x10\xad\x98\xbe\xac\xb3\x34\x17\xd5\x72\x43\xf8\x4a\x11\xf6\x97\xe5\x4a\x9c\x54\x1b\x75\x55\x46\x87\xdf\xab\xab\x32\xab\x59\x49\x51\x46\x61\x12\x86\xb9\xe0\x4a\x43\x0c\xcb\xa5\x95\xe7\x27\x23\xe4\x0b\x71\x8d\xf2\x82\x54\x58\x3e\xa7\xc8\x35\x34\x8d\x1d\x7e\x49\x2a\x04\xb5\xc6\x9c\x15\x0c\x15\xe8\x4b\x04\xab\x13\x70\x52\x61\x6a\x85\xeb\x58\xfc\xbc\x5e\x1f\x64\x71\x06\x51\x37\x0f\x9a\xc6\xa9\xb5\x5c\xc2\x8f\xe4\x66\x82\xfe\x05\xab\x98\x1e\x2c\x5f\xda\x67\x51\x00\xe3\x0a\xa5\x06\xc2\x29\x28\x2c\x31\xd7\x20\xd6\x66\xab\x98\xe0\x2a\x0d\x83\x63\xb8\x32\xae\xe1\x0c\xbe\x79\xfc\xf8\xb1\x31\xc9\x07\x22\xcd\x46\x4c\x98\xe3\xbc\x64\x44\x81\xff\x4d\x70\xb7\xf3\x26\x39\x7d\xcf\xb0\xa4\x2d\xab\xb7\xef\x94\x96\x8c\xaf\x26\x29\x7e\x5e\x53\xa2\xd1\xd3\x55\x64\xfd\xd6\xd1\x18\xd2\x3a\xd7\xdb\xc6\x1b\xd3\x4f\x20\x12\x81\x94\xa5\xb8\x46\xda\xb9\x23\x35\x06\xa4\x93\x8b\xbc\xaa\x98\x7e\x56\xad\xf5\x66\x62\x9d\x7e\x11\xf5\x9e\xad\xd7\x48\xe1\xfa\x12\x5b\xf7\x67\x7c\x05\xd7\x4c\x5f\x02\x1a\x2e\xf0\x81\x94\x35\x1a\xdb\x0e\xdd\xec\xb6\xbd\x9e\x12\xb1\xe3\x60\x94\x08\x10\xd9\x7f\x30\xd7\x69\xa8\x37\x6b\x9c\xa5\xb6\xd2\xc1\x36\x0c\x68\x06\xdd\xef\x6b\x75\x55\xa6\x4f\x9f\x58\x47\x2b\x84\xcc\xf1\x47\xa2\x34\x4a\xc8\x84\x28\xed\xe0\xd7\xb3\x9b\xd8\xcc\xc9\xee\x7c\x82\xd8\x7f\x45\x01\x85\x33\x0d\xe3\x3e\x46\x86\x1e\x9f\xc2\xac\x2e\x8e\x5b\xa7\xcd\x76\x7b\x02\x92\xf0\x15\x42\x7a\xae\xb5\x54\x06\x33\x86\xfe\x67\xe3\xaa\x69\xc0\xed\x51\x1f\xcc\x16\x5c\x0c\x31\x72\x6a\xfe\x9c\xd5\xe2\x19\xd7\x4c\x6f\x46\xd2\x7a\x05\x2a\xb2\x5e\x33\xbe\x72\x58\xf7\xba\x44\xa2\xcc\x18\xaf\x49\x59\x6e\x40\x62\x25\x3e\xa0\xdd\xb1\xda\xfa\x27\x68\xb2\xb2\xca\x5f\xa2\x33\x05\xe8\x4b\xa2\x81\x29\xe0\x42\x1f\xf0\xc8\xf9\x1d\xf6\xd2\xdd\xd9\x2c\x96\xa5\xe1\xdd\x34\xf0\x2b\xcd\x4e\xa3\xde\x3a\x91\x79\xc9\x0a\x2b\x56\xfa\x5c\xbd\x7e\x0f\x27\x4d\x63\x25\xd6\x64\x75\x1a\x39\x6d\xa2\xde\x84\xbf\xfa\xf9\xe9\x85\xa8\x2a\x23\xd5\x49\xd3\x78\x93\xb6\x23\x76\xc1\x76\x3e\xec\x98\xbf\xa8\x79\x0e\x8c\x33\x1d\x27\xb0\xb5\xc2\x3e\xe7\x4c\x5b\x7d\xed\x9e\xc7\xb3\xea\x6f\x9b\x05\x3c\x9a\x03\xa7\x24\x0c\x3a\xbe\x2e\x4a\x1f\xce\xd8\xf1\x49\x8e\x47\xa7\x33\xa8\xc8\x7b\x8c\xf7\x80\xc7\x02\x4a\xe4\xf1\xfc\x5a\x43\x35\x86\xac\x8f\x53\xe6\x48\x39\xa7\x35\xda\x85\xc2\xc3\x4a\x0d\x85\xdd\xa1\x7a\xb0\xbc\x3b\xfc\x12\x1f\xc9\x2f\xf1\x7a\x06\x10\x73\x89\x26\x1c\x09\x70\xbc\xf6\x91\xdc\xe2\xa9\x75\xc5\x59\x0e\x71\x32\x89\x8e\x66\x8d\x6d\x18\x48\xd4\xb5\xe4\x03\xf7\xd9\x3b\x73\x1b\x06\x01\xcd\x4e\x61\x55\x8a\x8c\x94\x4f\x9f\x2c\xc2\x63\x93\xe8\xe9\xbc\xcb\x2f\xc2\xa0\x05\xb8\xe7\xae\x24\xf0\x95\x81\xe0\x26\x8f\x68\x02\x12\x73\x21\xa9\x57\x3c\xa6\x73\x7a\x25\x9e\x4f\x9c\xeb\x1b\xf0\x55\x59\x7a\xe1\xfe\x5f\xb8\x94\x36\xca\x8c\x8c\x6b\x94\x05\xc9\x71\xdb\x24\x71\x49\x94\x76\xe4\xcf\x9f\x9a\xfa\xe2\xcf\x7f\x5a\x00\x4a\x09\xb6\xa4\x4b\x5c\xe4\xb3\xc2\x86\x81\xe3\x94\xc0\xd9\x19\x3c\xf6\x98\x60\x7e\xde\xa4\x43\x46\x0b\x47\xae\xd2\x97\x78\x1d\x47\x6b\x22\x49\xd5\xca\x91\x13\x6e\x20\x2c\x43\x97\x71\xa3\xc4\xf2\x71\x70\x98\x8b\x52\xc1\xa9\x77\xdc\xb6\xc8\x58\xc0\xe3\xc5\x70\x79\x47\xf0\x81\x8c\xa6\x0e\x54\xda\x3f\xbf\x10\x12\x7e\x59\x78\x88\x3f\x3d\xf3\x68\x3c\x5f\xf0\xf4\x6a\xb2\xc2\x2c\xba\x00\xf1\xde\xd0\x3b\xe6\x6f\x2d\xbf\x77\xdf\x9a\xc1\x7e\x66\xa7\xca\x19\x90\xf5\x1a\x39\x8d\xcd\x93\x5f\x3c\x19\x4d\xb3\x6a\x74\xd3\xcc\x93\xdd\xb0\x7e\x52\x03\x03\xfb\xf8\x7d\x30\xdc\xee\xbe\x0b\x5c\x18\xce\x8c\x7a\x1b\x58\x47\x2b\x44\xcd\x69\xb7\x05\x61\xb0\x5c\xc2\xdf\x50\x62\xd7\x22\x10\x4a\x41\x89\x0a\x81\x62\x41\xea\x52\xb7\x9b\x68\xac\xd9\x65\x4c\x53\xbc\x2e\x97\x80\x37\xa4\x5a\x97\x78\x6a\x1f\xf2\x5a\xfe\xc4\x2a\x34\x96\x32\x1d\x41\xfa\x52\x5c\xc7\x49\xfa\x33\x67\x37\x71\xd2\x96\xd1\xac\x30\x3b\x32\x32\x67\xe4\x50\xe0\x17\xdb\x45\xbc\xfb\x16\xbe\x1a\xd9\xd5\xf0\xdd\x63\xd6\x11\x51\x32\x9c\xbd\xcf\xba\x5e\xb2\x4e\x8a\x66\x4a\x1c\x97\x55\xef\x28\xce\x90\xe8\x9e\xe2\xb0\xcc\x48\xd1\x77\x40\x66\x07\xdd\xae\x3e\x71\x03\xde\x8a\x2c\x4b\xfd\x66\x73\x2d\xa6\xb0\xbb\x6b\x6a\x3a\xba\x0b\x51\x2a\x2b\x71\x9a\xa6\xdd\xe0\x3f\xad\xde\x56\xb4\x6e\x58\x5d\x95\x0b\x20\x72\x65\xc3\x8d\x65\xa9\x95\x20\x4e\x0c\x94\xaa\xba\xd4\x0e\x2d\x4e\xcf\x80\xa6\x34\x4b\x9f\xdd\x60\x1e\x1b\x0a\x43\x60\x59\x04\xac\xb0\x33\xbe\x3a\x03\xce\xca\x91\xf5\x4a\xb1\x72\x1e\x1a\x06\xc1\x3e\xf7\x35\x64\x06\x2b\xdb\x97\x6e\xc1\xf4\x45\x3f\xc7\xc8\x31\x44\xd2\x1f\x09\xdf\xb4\x68\x5a\xd5\xa5\x66\xeb\x72\x04\xa9\xea\xce\x98\x6a\x38\x4e\xe0\xea\x0b\xa6\x34\xbc\x7d\x77\x00\x5c\x21\xee\x91\xd4\x24\x9f\x21\x8e\x1a\xca\x2e\x88\x5b\xfd\x8d\xb6\xbb\x80\xeb\x26\x7e\x77\x54\xd7\x79\x0b\x0e\x8a\x4a\xa7\xcf\xcc\xfa\x45\x1c\x49\xcc\x91\x7d\x40\x0a\xff\xe7\xa2\x7f\x01\x78\x93\x23\x52\x53\x88\x9b\x60\xae\xc8\x0d\xab\xea\xca\xbc\xb6\x3d\x6b\xb4\xd8\x11\x62\x71\x8c\x0c\x2d\x98\x04\xa6\x3b\xb5\xf1\xd1\x77\x8b\x66\xc8\xf8\x96\xb7\xda\x08\xb6\xc3\xc0\x80\x0a\xe3\x14\x6f\xba\x9c\xd5\xe1\x74\x6f\x6b\x63\xab\xfd\xe9\x28\xe8\x9c\xe8\x0e\xb9\x27\x30\xee\x15\xdc\x25\x99\x04\xc1\xfd\x53\x49\x60\x65\x9f\xc9\x22\x81\x9b\x65\x2d\x31\xd0\x2d\x08\x26\x52\x8a\x79\xdd\xd8\x7f\x0f\x26\x14\x3f\xa3\x55\xd7\x1a\x73\x34\xcf\x8c\xd8\xb9\xa6\xce\x6c\x3a\x67\x1d\x25\x9b\xbd\x26\x9e\x4a\x2c\x41\x07\xaf\xe7\x94\x76\x59\x24\x17\x65\x5d\x71\x95\x86\x1d\x30\x4a\xb8\x24\xea\x9c\xd2\x0b\x0b\xe5\x0b\xff\xe4\x8a\xdf\xbe\xfb\xdd\x87\xd2\x46\xec\xb7\x8f\xdf\x4d\xa4\x8e\xe5\xf2\x60\x46\xde\x93\x3a\xfc\xec\xa1\x38\x70\x06\x5a\xd6\x38\x9f\x31\x3a\x59\x0e\xe6\x8d\x29\x59\x6e\xe7\x8d\x91\x2c\xde\x18\xbb\xb2\x04\xc7\xe4\x8a\xe0\x3e\x89\x22\xb8\x95\x25\x66\x33\x7b\x1b\x1b\x6d\x40\x75\xd1\xab\x7c\xf0\x0e\xd0\x7f\xe8\x10\x2e\x0e\xd2\xe1\x6b\x56\x8c\xf7\x60\x44\x7b\xa8\x74\x1a\x65\xd3\xd1\x76\xed\x72\xf5\xd6\x7c\x00\xd7\x20\xd8\x93\x30\x4d\xe0\x1c\x4c\x98\xbf\xb8\x5c\xb9\x9b\x2a\xe1\x40\xae\xdc\x89\xb7\x61\x26\xe4\xac\x34\x79\xcf\x24\xbe\x1f\xf0\x56\xe3\xe0\x8e\x30\x2a\x44\xed\xce\xa6\xae\x6a\x94\x1b\xc8\x25\xd3\x28\x19\x39\x3e\x03\xfe\x80\x07\x5a\x8a\x5c\x70\xaa\x20\x4d\xd3\x09\x0e\x17\x82\xd3\x04\xa6\x5a\x67\x7f\x48\x32\x25\x86\x9b\x32\x6c\x48\x8c\x51\xd4\x1e\x8f\x7f\x63\x4f\x54\x07\x1e\xaf\xb2\xd4\x8d\xcd\x77\xef\xce\xf6\x2a\x4b\xbf\x97\xa2\x3a\x36\x38\x84\x91\x61\xba\x29\x35\x26\x30\xd1\xc3\xbb\x25\xae\xca\x73\xef\x17\x56\xd2\x59\xda\x47\xca\x84\x20\xa7\x0b\x78\x24\x9c\x88\xff\xba\x44\x89\xb1\x67\xd4\xd7\x68\x59\xfa\x4a\x52\x94\x4f\x36\x71\xb4\xdd\xa6\xaf\x25\xab\x88\xdc\x34\x4d\x94\xa4\x4f\x51\xe5\xde\x1e\x36\x3f\xc7\xdf\x24\x3b\x2e\xaa\x7a\x17\xf5\xb5\x07\x4d\x87\x87\x8f\x7d\x8c\xa8\xab\x12\xce\xe0\xfb\xfe\x9d\x95\x96\xc1\xff\x9b\x37\x6d\xde\x97\xe2\x5a\x8d\x8b\xc2\xbf\x1b\xff\x3b\xd6\xd5\xad\x9b\x53\x2c\x50\x82\xe1\x94\x5e\x94\x42\x61\xec\x08\xec\xc0\x4b\xbc\x71\x67\x52\xc1\xd4\x69\x88\x77\xae\xb3\xc9\x4e\xbf\x3d\xd1\x98\x66\xf5\xc6\x9d\xe2\xdd\x76\x39\x3b\x1e\x73\xbc\x9e\x3f\x35\xb1\x85\x83\x0b\x7e\xab\xc4\x9b\x9c\x4c\x1e\x2b\x39\xde\xe9\x39\xa5\x72\x3e\x84\x92\xce\x0f\xfc\xfe\x8d\x0c\x0b\x83\x9f\x87\x8f\xbe\xbb\x1c\x80\x8a\x2f\xa4\x2f\x44\xcd\x35\x68\xa1\x49\x09\xa2\x38\x1e\x56\xee\x50\x59\xdb\x25\x1e\x8c\x2c\x4e\x44\xc6\xf5\x03\xe1\x21\xca\xad\x38\x5f\x27\xd1\xff\x30\x08\x7c\x8e\x11\x3d\xd9\xe9\xdd\x25\xcc\x77\xe3\xe6\x91\xdd\xfa\x8f\xe6\xf1\xb6\x34\xd9\xdb\x2d\x7e\x34\x8f\x37\x4b\xec\x77\x78\xdb\x69\x2d\x40\x14\x85\x42\xed\xbc\xf9\xe3\x64\x57\xdf\x63\x7d\xc9\xae\x9f\x22\xbb\xb6\x3d\xbb\x6d\xc2\xff\x6a\x7a\xa5\xdf\x7e\xf3\x4f\x77\x69\xdc\xfb\x24\x7d\x7c\xa3\x0d\x58\x2a\xbc\x45\x5f\x0e\x5b\x71\x2f\x9d\xf7\xb1\xef\xfa\x73\x43\x33\xff\x95\x1d\x8d\xdd\xcb\xae\x79\xff\xc3\xc0\xc9\x27\xc8\xeb\xa6\xe7\xb9\x7b\x65\x72\x7a\x74\x69\xf2\x59\x96\x0d\x53\x1a\x8e\xcf\x16\x66\x26\x4e\xde\x26\x79\x41\x6f\x63\xf6\x79\x59\xfe\xce\x90\x7d\x5e\x96\x13\x88\xfd\x05\xa9\xff\x08\x48\xfd\xdd\x08\x09\xf7\x20\xe7\x17\x1c\xfc\x82\x83\x9f\x35\x0e\xfa\x63\x2c\xa6\xda\xaf\xf9\x0c\xe6\xdd\x82\xc2\x87\x21\xa1\x5b\xe3\x1e\x97\xcb\xf7\x6b\xe7\xc6\x17\xd0\x83\x6b\x13\xcb\x6c\xef\x95\x49\x50\xef\x41\x42\x27\xf6\x00\x09\xeb\x2c\xf5\xaa\x1c\x09\x6d\xf6\x3c\xdb\x6e\xe2\xfc\x9d\xf4\xce\xed\xc5\xce\xd5\x85\x6a\xef\x2d\xba\xf3\xe2\x23\x3f\xf9\x78\x6b\x59\x76\x47\xc8\xf6\x16\x80\x6b\xc6\x6b\xf4\x67\xf9\x47\xf2\xdc\xf9\x2c\xa3\x63\xdb\x72\x35\x5d\x17\x16\x26\x4d\xb8\x23\xcd\x57\x85\x51\x2d\x49\x9f\xab\x7f\xa3\x14\x3e\x98\x47\x8b\x77\xb7\x09\xbd\x95\x3a\x57\xef\x86\x16\x50\x67\xe9\xb9\x52\x6c\xc5\xe3\xde\x38\x89\x73\x64\x6f\x19\x1b\x68\xdd\x26\x77\xa4\x07\xef\xc6\x96\x4b\xa0\x48\xca\xee\xfb\x2d\x56\xa1\x3d\x98\x3e\x56\x8e\xa8\xfd\x8c\x2b\x5a\x0c\x4e\xb0\x13\xe7\x20\x6f\x50\xf7\x54\x0e\x7f\x3f\x4d\x82\xab\x47\x09\xae\x9e\xef\xf1\xeb\x63\x6f\x62\x1f\x94\x4a\xc6\x37\xaf\xff\x10\xd7\xea\xbc\x28\x30\xd7\xd8\xdf\xbc\x3e\xc5\x12\x35\xfe\x1e\xc0\xe3\x38\x7f\xbc\x83\xa2\xfb\x20\x0b\xdd\x83\x2c\x4e\xae\x01\xb2\xd0\x2c\x75\x63\x9f\x5f\xe1\x44\x47\x7e\x45\xe7\xfd\x8a\x7e\x16\x7e\x65\x1c\x6b\x50\x3e\xd9\x0f\x51\xdc\x1d\xb5\x7d\x64\xb6\x9c\xd2\x1b\xfb\x21\x4a\xff\x15\x35\x88\xc2\xce\xca\x6b\x29\x8d\x15\xfc\x07\x64\x70\xbc\xcb\x0d\xd6\x8c\xfd\xc7\x4f\xe3\x1a\xcf\x5f\xbf\x79\xd7\x67\xca\x7e\xb7\x38\x78\x3f\xf8\xc0\xf4\xf7\x96\xf5\xf6\xea\x87\x44\x2e\x48\xa9\xb0\xfb\xa8\xf3\xa8\x9c\xaf\xf0\x42\x70\x1e\xd3\xac\xfd\x26\xb9\x63\x4d\x33\x30\x5e\x72\x27\x76\x17\xa5\xe0\x8e\x61\x02\x43\x9e\xde\x57\xbc\x37\x18\xde\x61\x13\xfe\x37\x00\x00\xff\xff\xe5\x3d\x53\xbe\xd3\x30\x00\x00"

func tableTplBytes() ([]byte, error) {
	return bindataRead(
		_tableTpl,
		"table.tpl",
	)
}

func tableTpl() (*asset, error) {
	bytes, err := tableTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "table.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conds.tpl": condsTpl,
	"dao.tpl": daoTpl,
	"table.tpl": tableTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"conds.tpl": &bintree{condsTpl, map[string]*bintree{}},
	"dao.tpl": &bintree{daoTpl, map[string]*bintree{}},
	"table.tpl": &bintree{tableTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

