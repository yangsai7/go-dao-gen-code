// Code generated for package tplbin by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/conds.tpl
// templates/dao.tpl
// templates/table.tpl
package tplbin

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _condsTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x41\x8f\x9b\x3c\x14\x3c\xc7\xbf\x62\xbe\xe8\xd3\x2a\x44\x89\xb9\x57\xca\xa1\x5d\xf5\xd0\xcb\xaa\x52\xb7\xa7\xaa\xaa\x1c\xfc\x60\xad\x05\x9b\xb5\x4d\x57\x11\xcb\x7f\xaf\x6c\x20\x1b\x68\xb7\x44\xe5\x64\x1b\x7b\x3c\x33\x9e\xf7\xd2\x14\xf7\x0f\xca\x21\x57\x25\xe1\x59\x38\x14\xa4\xc9\x0a\x4f\x12\xc7\x13\x0a\xb3\x97\xc2\xec\x33\x23\x69\x5f\x90\xde\x81\xa5\x29\x4e\xa6\x41\x26\x34\x2a\x23\x55\x7e\x82\xf2\xf0\x06\x47\x42\x65\x2c\xc1\x35\xca\x8b\x63\x49\x1c\x8c\xd5\x22\x7b\x14\x05\xa1\x6d\xc1\x3f\x3f\x16\xe8\x3a\x16\xce\x87\xe9\x7d\xd8\xf3\xb5\xae\xc9\xde\x8a\x8a\xca\x4f\x92\xb4\x47\xd7\xdd\x1a\x2d\x1d\x5c\x4d\x99\xca\x15\x39\xf8\x07\x42\x66\xb4\x54\xde\xe8\x48\x51\x3a\x98\x1c\xfd\x0d\xcc\x9f\x6a\xba\x02\xcd\xdb\x26\xf3\x68\x59\xdb\xee\x61\x85\x2e\x08\xfc\xbd\xf7\xd6\x05\x3e\x18\xbe\x80\x72\x27\x2a\x42\xd7\x61\x1b\x21\x03\x76\xd7\x85\x1f\x2a\x07\xbf\x35\x55\xd5\x83\x0e\x02\x5e\x17\x10\x70\x49\xcb\x30\x64\xaf\x63\x76\x95\xd8\xb9\xd6\xd2\xb8\xc6\x12\xf2\x46\x67\x5e\x19\x1d\xc4\xf6\xfa\x95\xd1\xee\x3a\xc5\xf1\xf0\x66\xbb\xe4\x4b\x12\xe9\xdd\xd1\xf3\xa2\x81\x96\x7c\x63\x35\x44\x64\xe2\x40\xda\x2b\x7f\x0a\xe9\x38\x33\x3b\xf3\x75\x28\x95\xf3\x9c\x85\xf9\x35\xd8\x9b\x1e\x92\x73\xbe\xb0\x33\x59\x7e\xe7\x96\xad\x7e\x0a\x0b\xb3\xb8\x93\xad\x72\x63\xf1\x63\x17\xf9\xe3\xdd\x61\x08\x45\x36\xa2\xac\xc2\x68\x73\x63\x12\xb6\xea\xd8\x6a\x50\x6f\xc2\x7b\xfe\x29\x41\x69\x8a\x2f\xe4\xdb\x16\xff\xbf\x75\xe9\x98\xad\xc9\xe2\x85\xab\xf3\x37\x0f\xec\x5e\xad\x35\x3a\x26\x23\x57\x54\xca\xc1\xd8\x7f\xb9\x6f\x33\x59\x1d\x92\x3d\xa6\x3c\xba\xfb\x26\x5e\x0c\x55\x7b\x76\x22\xc6\xcb\xc4\x2a\xf9\xeb\x11\x97\x44\x33\x0d\xbf\xac\xad\x03\x6e\xe6\x44\x82\xcb\xd1\xdb\xb1\x70\x7a\x91\x1f\x1a\x55\xca\xc5\xfc\xb8\xa7\x32\xd2\xdb\xba\xa7\xf2\x18\x4e\x90\xe5\x61\x61\x37\x3c\xe7\x72\x19\x60\x23\x6c\xe1\xf0\xed\xbb\xf3\x56\xe9\x22\x90\x0e\x0d\x41\xe5\x18\xb1\x0f\x07\x68\x55\xe2\xe5\x65\xc0\x1c\xe6\xed\xb9\x79\xf4\xc6\xc4\x69\xdf\x51\xe6\x39\x99\x34\x9a\x7d\xc0\xd6\x34\x98\xbf\xf6\xaa\x22\x7e\xaf\x2a\x5a\xc7\x06\x82\x8b\x4f\xf5\xc5\xef\x26\x0e\xfe\x37\xbf\x7d\xfc\xa2\x8c\x03\x44\x5d\x93\x96\x51\xd4\x6e\x94\xc0\x3f\x3e\x35\xa2\xdc\xac\x7b\x33\x42\x23\x5e\xef\xb0\xfd\x0d\x3b\x49\x26\xa0\x53\xd2\xc3\xe3\xcc\xa6\x63\x28\xc2\x75\xac\x63\xbf\x02\x00\x00\xff\xff\x9d\x41\x83\x4a\x4e\x06\x00\x00"

func condsTplBytes() ([]byte, error) {
	return bindataRead(
		_condsTpl,
		"conds.tpl",
	)
}

func condsTpl() (*asset, error) {
	bytes, err := condsTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conds.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _daoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x6f\xe3\x36\x13\x3e\x4b\xbf\x62\x5e\x9d\x24\xaf\x2d\x27\xd7\xdd\xd5\xe1\x4d\xb2\xbb\x08\xda\x26\x05\xe2\x16\x05\x82\x60\x41\x4b\x43\x65\xb0\x14\xa9\x90\x94\x13\xd7\xf0\x7f\x2f\x48\x4a\xb6\xec\x38\xcd\xde\x9a\x43\x6c\xcd\xc7\x33\x1f\x0f\x1f\xca\xf3\x39\x2c\x1e\xc9\x00\x27\x81\xf0\xcc\x0c\xd4\x28\x51\x33\x8b\x15\x2c\xd7\x50\xab\x59\xc5\xd4\xac\x54\x15\xce\x6a\x94\x71\xdc\xb2\xf2\x07\xab\x11\x36\x1b\xc8\x7f\xff\x51\xc3\x76\x1b\xc7\xd4\xb4\x4a\x5b\x48\xe3\x28\x29\x95\xb4\xf8\x62\x93\x38\x4a\x50\x6b\xa5\x8d\xfb\xa6\x91\x0b\x2c\xbd\xd1\x58\x4d\xb2\x36\x49\x0c\x00\x90\x54\xcc\xb2\x25\x33\x38\x37\x4f\x22\x89\xe3\x28\xa9\xc9\x3e\x76\xcb\xbc\x54\xcd\xbc\x56\x33\xf3\x24\x66\x95\xa6\x15\xea\x79\xb3\xf6\x21\x07\x11\x8f\x1d\x93\x55\xd7\x07\x2e\x3b\x12\x15\xea\x24\xce\xe2\xb8\x54\xd2\xb8\x76\x5c\x8d\xf9\x1c\xee\x1e\x59\xa5\x9e\x2f\xed\xcb\x2f\xb8\x06\xd3\x62\x49\x9c\xd0\x80\xf1\x66\xa0\x0a\xa5\x25\xbb\x06\x92\xd0\x77\x9f\xc7\xd1\x61\x8e\x6f\x1a\x0a\x48\xfe\x9a\x05\x47\x32\x60\x7f\x55\xba\xc4\xdf\x98\xb1\xa8\xaf\x3d\xd0\xa8\x00\x77\x3e\x68\xbc\x13\x2c\xab\x5d\x05\xf3\x24\xa0\x54\x4d\x83\xd2\xe6\x1e\xe3\x04\xc0\xae\xda\x7c\xe2\x21\xbe\x07\x88\xc9\x1c\xfc\x74\x2b\xa6\xdd\xaa\x6b\xa1\x96\x4c\x5c\x5d\x38\x10\x98\x98\x27\x91\x5f\x5d\x38\xf7\x7c\x0e\xd7\x92\xec\x15\x53\x40\x92\x2c\x31\x41\x7f\x23\x0c\x9b\x76\x23\x4a\x2c\x2d\x29\x09\x4c\x56\xc0\xaa\xca\x15\xeb\x77\xd1\xb0\xb6\x25\x59\xe7\x31\xef\x64\x39\xc0\xa4\xa5\x7d\xd9\x6d\xe6\x32\x7c\x4e\xa1\xe4\x35\x4c\x3c\x2b\xce\xc6\xa9\xce\x20\x45\xad\xc1\xb3\x9e\xc1\xc6\x0f\x47\xdc\xc7\x15\x05\x48\x12\xbd\xcd\xfd\xb9\xc0\x22\x84\x9a\xfc\x06\x9f\xd3\xc4\x23\xb9\x2a\x9c\x6a\x20\xe3\xe2\x93\x6c\x17\xaf\xd1\x76\x5a\xfa\xc7\xad\xff\xdf\x4f\xa1\xf4\xd4\x63\x7d\x2c\x20\xb4\x72\x83\xcf\x97\x83\x2b\x2d\x79\x9d\x0d\x6d\xb8\xa8\xff\x1d\xb7\x71\x00\xbb\x5f\x68\xe1\x58\xca\x6f\x5b\x94\x57\x17\xe9\xae\x52\x16\x47\x7d\xfc\xd6\x2f\xf9\x52\x28\x83\x60\x1f\x0f\x56\xda\x2a\x25\xa6\xd0\x19\x74\x5c\x3b\x5f\xc3\x48\x82\xdb\xa6\x77\xaf\x88\x41\x85\x1c\x75\xbf\x61\x8f\x91\x8e\xb6\xb5\xeb\xe1\x55\xaf\x83\x27\xef\x73\xfa\xae\xb7\x3b\xc2\x17\x6c\x29\xf0\x2b\xa1\xa8\xcc\x98\x78\x8e\x24\x2a\x90\xac\x41\x03\x82\x8c\x05\xae\x55\x03\xd6\x05\x43\x38\xf8\x39\xc0\x9e\xef\x11\x4a\xba\x02\x92\x16\x35\x67\x25\x6e\xb6\x53\xe0\x01\x7b\x72\xff\x10\x4e\xa8\x6b\x3b\xb2\x6e\xf7\xbd\xbe\xf3\xc5\xba\xc5\x5b\x9e\xae\xb2\x38\x9a\xf4\xd1\x05\x34\xec\x07\xa6\x43\xce\x14\xce\xa6\x60\xf3\x9b\xae\xf1\x35\xd2\x2c\x8b\x23\x77\x9e\x7d\xf4\x0d\x6b\xb0\x3f\xfd\x71\xc4\x95\x06\x72\xe0\x67\x9f\x80\xe0\xf3\x41\xd2\x27\xa0\x0f\x1f\x5c\xf5\xc8\xa9\xea\x63\x01\x36\x0f\x1e\xca\xf2\x05\xab\xf3\x6f\x68\xd3\xa4\x5a\x26\x59\x1c\x45\x7b\xe4\xa2\xc7\x36\xf9\x5d\x2b\xc8\xa6\x96\xd5\x53\x48\xa6\x49\x76\x7f\xf6\x10\x47\x11\xf1\x51\x17\x45\x01\x49\xe2\x2b\x44\xee\xe4\x93\xec\x30\x8e\xa2\x6d\x1c\x8d\x06\x63\x6d\x8b\xb2\x4a\x7b\xc3\x74\x87\xbe\xd0\xd4\xdc\xb5\xac\xc4\x74\x87\xe7\xc6\x7c\xc5\xd5\x1f\x6d\xc5\xec\xc0\xd8\xf5\x9e\xb1\x46\x55\xc4\xc9\x13\xe4\x01\x7a\xf2\x4e\xf0\x76\x44\xdb\x18\xf0\x0d\xf2\x1a\xd6\xde\x87\x3e\x1d\x21\x5d\x69\x37\x5b\x4f\xe3\x30\xbc\xd9\x6b\x35\x8a\x5a\x26\xa9\x4c\x93\xce\xc3\x0e\x7e\xa9\xec\x70\xbc\xa0\xd5\xaa\x45\x6d\xd7\x89\x1f\x2f\xe8\x52\x18\x47\xc8\xfe\x42\x76\x92\xbc\xf3\xa5\xd2\x55\x96\x5f\x2a\xd1\x35\xd2\x7c\x55\x7a\xc1\xea\x01\xba\x17\xba\x63\xfc\xfb\xd4\x41\xf8\x33\xc5\x64\x8d\x01\x6f\x2f\x82\xd0\xc3\x7d\xa9\xc4\x43\xa0\xd3\x4f\xb0\xd9\x9e\x16\xc3\x6d\x43\xf6\x4b\xd3\xda\xf5\xeb\x1d\xab\x86\x2c\x3a\xd7\x3b\x2b\x3e\xda\xf0\x11\xe2\x7f\xb0\xe4\x37\x05\xf7\x73\x7a\xb9\xba\x58\xbc\xab\x18\xd5\xda\xc0\xe1\x81\x5a\x7c\x66\xd0\x8b\x53\x55\xe0\x4a\xb5\x76\xcf\x95\xcf\xf3\x92\x21\x7e\x42\x0c\xaa\xb5\x99\xd7\xd5\x6e\xf7\xbd\xc0\xa2\x9e\x55\x97\x7f\x7f\xf6\x70\xc4\x6c\x14\x64\xb7\x3d\x21\xa0\xff\x0b\x62\xe6\xf5\x8d\xc7\x9c\x19\x14\x0f\x57\xdf\x4f\xb0\xea\x71\x8e\xb9\x0c\x28\x23\x93\xa7\x50\xbf\xb5\x7e\xbd\x1a\x3b\xfe\x64\xa2\x73\x1e\x0f\x72\x82\x1c\xfd\x0e\x3b\xfa\x5f\xe8\xb1\xac\x7e\x97\x1e\xe2\x20\x50\xba\x1b\xce\x64\xf0\x19\xce\x4f\xde\x64\x7a\x95\x7f\x11\xd8\xa4\x59\xa8\x75\xb1\x76\x37\x55\x3a\x2e\xed\xaf\xae\xfc\x0e\xed\x9d\xaf\xe5\xf1\xee\xcf\x1e\x46\x97\xd9\x37\xb4\xb7\x9c\x1b\xb4\x50\xa3\x85\x96\xd5\x24\x99\x7f\xd3\x29\x6f\xed\x37\xbd\x8b\x4a\x5b\x56\xe3\xb5\xac\xf0\xc5\x6d\x76\xea\x12\xf0\x57\x6a\xc8\x9d\x76\x9b\x41\x1a\xb2\xc2\xc3\xee\x9d\xb8\x0f\x0a\x93\x0c\x97\xc1\xde\x5e\xc0\xf9\xd9\xe8\xc7\x41\x9f\x13\xea\xbc\xce\x09\xf6\x02\xce\x47\x29\xe1\xcd\x0e\xa3\xfe\x66\x70\x9e\xc1\x64\x5f\x24\xde\xc6\xff\x04\x00\x00\xff\xff\xb9\x1c\x36\x5c\x2a\x0b\x00\x00"

func daoTplBytes() ([]byte, error) {
	return bindataRead(
		_daoTpl,
		"dao.tpl",
	)
}

func daoTpl() (*asset, error) {
	bytes, err := daoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dao.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tableTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x8f\xdc\xb6\x11\x7f\x96\x3e\xc5\x44\x40\x0d\x29\xdd\xd3\x3a\x40\xd1\x87\x4b\x2f\xc0\xf9\xec\xa4\x06\x1c\xdb\xad\x93\x16\xa8\x61\x24\x94\x38\xda\x63\x8f\x22\xf7\x44\xca\x77\x8b\x8d\xbe\x7b\xc1\x3f\xfa\xb7\xb7\x2b\xed\xf9\x1c\xc3\x0d\xbc\x0f\xf6\x89\x1a\x0e\x67\x86\x33\xbf\x99\x21\xb5\x5c\xc2\x4f\x97\x4c\x41\xc1\x38\xc2\x0d\x51\xb0\x42\x81\x15\xd1\x48\x21\xdb\xc0\x4a\x9e\x50\x22\x4f\x72\x49\xf1\x64\x85\x62\x01\xe1\x72\x09\x1b\x59\x43\x4e\x04\x94\x92\xb2\x62\x03\x4c\x83\x96\x90\x21\x94\xb2\x42\x50\x35\xd3\x24\xe3\x98\x42\x18\xae\x49\x7e\x45\x56\x08\xdb\x2d\xa4\xaf\xaf\x56\xd0\x34\x61\xc8\xca\xb5\xac\x34\xc4\x61\x10\xe5\x52\x68\xbc\xd5\x51\x18\x44\x58\x55\xb2\x52\xe6\x2f\xcd\x4a\x8c\x42\x00\x80\xa8\x28\x75\x14\x86\x41\xb4\x62\x9a\x93\x2c\x15\x92\xb3\x4c\xde\xa6\xb9\x2c\x97\xea\x6a\xa3\x91\x94\xcb\x95\x3c\x29\x37\xea\x9a\x47\x8e\xec\xb2\xce\xec\xeb\xcb\x9a\x08\x5a\x9b\xb7\xea\x9a\x67\x35\xe3\x14\xab\x28\x4c\xc2\x30\x97\x42\x69\x88\x61\xb9\xb4\x42\xfd\x64\x24\x7d\x21\x6f\xb0\xba\x20\x25\xf2\xe7\x14\x85\x86\xa6\xb1\xc3\x2f\x49\x89\xa0\xd6\x98\xb3\x82\xa1\x02\x7d\x89\x60\x15\x03\x41\x4a\x4c\xad\x84\x1d\x8b\x9f\xd7\xeb\x83\x2c\xce\x20\xea\xe8\xa0\x69\x9c\x6e\xcb\x25\xfc\x48\x6e\x27\xe6\xbf\x60\x25\xd3\x83\xe5\xb9\x7d\x96\x05\x30\xa1\xb0\xd2\x40\x04\x05\x85\x1c\x73\x0d\x72\x6d\xf6\x8b\x49\xa1\xd2\x30\x38\x86\x2b\x13\x1a\xce\xe0\x9b\xc7\x8f\x1f\x1b\x93\xbc\x27\x95\xd9\x8d\x09\x73\x9c\x73\x46\x14\xf8\xdf\x04\x77\x4b\x37\xc9\xe9\x7b\x86\x9c\xb6\xac\xde\xbe\x53\xba\x62\x62\x35\x39\xe3\xe7\x35\x25\x1a\xfd\xbc\x92\xac\xdf\xba\x39\x66\x6a\x9d\xeb\x6d\xe3\x8d\xe9\x09\x48\x85\x40\x38\x97\x37\x48\x3b\x9f\xa4\xc6\x80\x74\x72\x91\x57\x25\xd3\xcf\xca\xb5\xde\x4c\xac\xd3\x2f\xa2\xae\xd8\x7a\x8d\x14\x6e\x2e\xb1\x8d\x01\x26\x56\x70\xc3\xf4\x25\xa0\xe1\x02\xef\x09\xaf\xd1\xd8\x76\xe8\x66\x77\xed\xf5\x94\xc8\x1d\x07\xa3\x44\x82\xcc\xfe\x8b\xb9\x4e\x43\xbd\x59\xe3\xec\x6c\x2b\x1d\x6c\xc3\x80\x66\xd0\xfd\xbe\x56\xd7\x3c\x7d\xfa\xc4\x3a\x5a\x21\xab\x1c\x7f\x24\x4a\x63\x05\x99\x94\xdc\x0e\x7e\x3d\xbb\x89\xcd\x9c\xec\xce\x27\x88\xfd\x57\x16\x50\x38\xd3\x30\xe1\x63\x64\xe8\xf1\x29\xcc\xea\xe2\xb8\x75\xda\x6c\xb7\x27\x50\x11\xb1\x42\x48\xcf\xb5\xae\x94\x01\x8e\xa1\xff\xd9\xb8\x6a\x1a\x70\x7b\xd4\x07\xb3\x45\x18\x33\x19\x05\x35\x7f\xce\x6a\xf1\x4c\x68\xa6\x37\x23\x69\xbd\x02\x25\x59\xaf\x99\x58\x39\xc0\x7b\xcd\x91\x28\x33\x26\x6a\xc2\xf9\x06\x2a\x2c\xe5\x7b\xb4\x3b\x56\x5b\xff\x04\x4d\x56\x56\xf9\x4b\x74\xa6\x00\x7d\x49\x34\x30\x05\x42\xea\x03\x1e\x39\xbf\xc3\x5e\xba\x7b\x9b\xc5\xb2\x34\xbc\x9b\x06\x7e\xa5\xd9\x69\xd4\x5b\x27\x32\x2f\x59\x61\xc5\x4a\x9f\xab\xd7\x57\x70\xd2\x34\x56\x62\x4d\x56\xa7\x91\xd3\x26\xea\x4d\xf8\xab\xa7\x4f\x2f\x64\x59\x1a\xa9\x4e\x9a\xc6\x9b\xb4\x1d\xb1\x0b\xb6\xf4\xb0\x63\xfe\xa2\x16\x39\x30\xc1\x74\x9c\xc0\xd6\x0a\xfb\x5c\x30\x6d\xf5\xb5\x7b\x1e\xcf\xaa\xbf\x6d\x16\xf0\x68\x0e\x9c\x92\x30\xe8\xf8\xba\x28\x7d\x38\x63\xc7\x27\x39\x1e\x9d\xce\xa0\x24\x57\x18\xef\x01\x8f\x05\x70\x14\xf1\xfc\x5a\x43\x35\x86\xac\x8f\x53\xe6\x48\x39\xa7\x35\xda\x85\xc2\xc3\x4a\x0d\x85\xdd\x99\xf5\x60\x79\x77\xf8\x25\x3e\x92\x5f\xe2\xcd\x0c\x20\xe6\x15\x9a\x70\x24\x20\xf0\xc6\x47\x72\x8b\xa7\xd6\x15\x67\x39\xc4\xc9\x24\x3a\x9a\x35\xb6\x61\x50\xa1\xae\x2b\x31\x70\x9f\xbd\x94\xdb\x30\x08\x68\x76\x0a\x2b\x2e\x33\xc2\x9f\x3e\x59\x84\xc7\x26\xd1\xd3\x79\x97\x5f\x84\x41\x0b\x70\xcf\x5d\x49\xe0\x2b\x03\x29\x4c\x1e\xd1\x04\x2a\xcc\x65\x45\xbd\xe2\x31\x9d\xd3\x2b\xf1\x7c\xe2\x5c\xdf\x82\x2f\xcd\xd2\x0b\xf7\xff\xc2\xa5\xb4\x51\x66\x64\x42\x63\x55\x90\x1c\xb7\x4d\x12\x73\xa2\xb4\x9b\xfe\xfc\xa9\xa9\x2f\xfe\xfa\x97\x05\x60\x55\x81\xad\xeb\x12\x17\xf9\xac\xb0\x61\xe0\x38\x25\x70\x76\x06\x8f\x3d\x26\x98\x9f\x37\xe9\x90\xd1\xc2\x4d\x57\xe9\x4b\xbc\x89\xa3\x35\xa9\x48\xd9\xca\x91\x13\x61\x20\x2c\x43\x97\x71\xa3\xc4\xf2\x71\x70\x98\x4b\xae\xe0\xd4\x3b\x6e\x5b\x64\x2c\xe0\xf1\x62\xb8\xbc\x9b\xf0\x9e\x8c\x48\x07\x2a\xed\xa7\x2f\x64\x05\xbf\x2c\x3c\xc4\x9f\x9e\x79\x34\x9e\x2f\x78\x7a\x35\x59\x61\x16\x5d\x80\xbc\x32\xf3\x1d\xf3\xb7\x96\xdf\xbb\x6f\xcd\x60\x4f\xd9\xa9\x72\x06\x64\xbd\x46\x41\x63\xf3\xe4\x17\x4f\x46\x64\x56\x8d\x8e\xcc\x3c\xd9\x0d\xeb\x89\x1a\x18\xd8\xc7\xef\x83\xe1\x76\xff\x5d\x10\xd2\x70\x66\xd4\xdb\xc0\x3a\x5a\x21\x6b\x41\xbb\x2d\x08\x83\xe5\x12\xfe\x8e\x15\x76\x7d\x02\xa1\x14\x94\x2c\x11\x28\x16\xa4\xe6\xba\xdd\x44\x63\xcd\x2e\x63\x9a\xe2\x75\xb9\x04\xbc\x25\xe5\x9a\xe3\xa9\x7d\xc8\xeb\xea\x27\x56\xa2\xb1\x94\x69\x0b\xd2\x97\xf2\x26\x4e\xd2\x9f\x05\xbb\x8d\x93\xb6\x8c\x66\x85\xd9\x91\x91\x39\x23\x87\x02\xbf\xd8\x56\xe2\xdd\xb7\xf0\xd5\xc8\xae\x86\xef\x1e\xb3\x8e\x26\x25\x43\xea\x7d\xd6\xf5\x92\x75\x52\x34\x53\xe2\xb8\xac\x7a\x4f\x71\x86\x93\x3e\x50\x1c\x96\x19\x29\xfa\x0e\xc8\xec\xa0\xdb\xd5\x27\x6e\xc0\x5b\x91\x65\xa9\xdf\x6c\xa1\xe5\x14\x76\x77\x4d\x4d\x37\xef\x42\x72\x65\x25\x4e\xd3\xb4\x1b\xfc\x97\xd5\xdb\x8a\xd6\x0d\xab\x6b\xbe\x00\x52\xad\x6c\xb8\xb1\x2c\xb5\x12\xc4\x89\x81\x52\x55\x73\xed\xd0\xe2\xf4\x0c\x68\x4a\xb3\xf4\xd9\x2d\xe6\xb1\x99\x61\x26\x58\x16\x01\x2b\x2c\xc5\x57\x67\x20\x18\x1f\x59\x8f\xcb\x95\xf3\xd0\x30\x08\xf6\xb9\xaf\x99\x66\xb0\xb2\x7d\xe9\x16\x4c\x5f\xf4\x34\x46\x8e\x21\x92\xfe\x48\xc4\xa6\x45\xd3\xb2\xe6\x9a\xad\xf9\x08\x52\xd5\xbd\x31\xd5\x70\x9c\xc0\xd5\x17\x4c\x69\x78\xfb\xee\x00\xb8\x42\xdc\x23\xa9\x49\x3e\x43\x1c\x35\x33\xbb\x20\x6e\xf5\x37\xda\xee\x02\xae\x23\xfc\xee\xa8\xae\xf3\x0e\x1c\x14\xa5\x4e\x9f\x99\xf5\x8b\x38\xaa\x30\x47\xf6\x1e\x29\xfc\xc9\x45\xff\x02\xf0\x36\x47\xa4\xa6\x10\x37\xc1\x5c\x92\x5b\x56\xd6\xa5\x79\x6d\x7b\xd6\x68\xb1\x23\xc4\xe2\x18\x19\x5a\x30\x09\x4c\x77\x6a\xe3\xa3\xef\x16\xcd\x90\xf1\x2d\x6f\xb5\x11\x6c\x87\x81\x01\x15\x26\x28\xde\x76\x39\xab\xc3\xe9\xde\xd6\xc6\x56\xfb\xd3\x51\xd0\x39\xd1\x3d\x72\x4f\x60\xdc\x2b\xb8\x4f\x32\x09\x82\x0f\x4f\x25\x81\x95\x7d\x26\x8b\x04\x8e\xca\x5a\x62\xa0\x5b\x10\x4c\xa4\x14\xf3\xba\xb1\xff\x1e\x4c\x28\x9e\xa2\x55\xd7\x1a\x73\x44\x67\x46\x2c\xad\xa9\x33\x9b\xce\x59\x47\xc9\x66\xaf\x89\xa7\x12\x4b\xd0\xc1\xeb\x39\xa5\x5d\x16\xc9\x25\xaf\x4b\xa1\xd2\xb0\x03\xc6\x0a\x2e\x89\x3a\xa7\xf4\xc2\x42\xf9\xc2\x3f\xb9\xe2\xb7\xef\x7e\xf7\xa1\xb4\x11\xfb\xed\xe3\x77\x13\xa9\x63\xb9\x3c\x98\x91\xf7\xa4\x0e\x4f\x3d\x14\x07\xce\x40\x57\x35\xce\x67\x8c\x4e\x96\x83\x79\x63\x4a\x96\xbb\x79\x63\x24\x8b\x37\xc6\xae\x2c\xc1\x31\xb9\x22\xf8\x90\x44\x11\xdc\xc9\x12\xb3\x99\xbd\x8d\x8d\x36\xa0\xba\xe8\x55\x3e\x78\x07\xe8\x3f\x74\x08\x17\x07\xe9\xf0\x35\x2b\xc6\x7b\x30\x9a\x7b\xa8\x74\x1a\x65\xd3\xd1\x76\xed\x72\xf5\xd6\x7c\x00\xd7\x20\xd8\x93\x30\x4d\xe0\x1c\x4c\x98\xbf\xb8\x5c\xb9\x9b\x2a\xe1\x40\xae\xdc\x89\xb7\x61\x26\x14\x8c\x9b\xbc\x67\x12\xdf\x0f\x78\xa7\x71\x70\x47\x18\x25\xa2\x76\x67\x53\xd7\x35\x56\x1b\xc8\x2b\xa6\xb1\x62\xe4\xf8\x0c\xf8\x03\x1e\x68\x29\x72\x29\xa8\x82\x34\x4d\x27\x38\x5c\x48\x41\x13\x98\x6a\x9d\xfd\x21\xc9\x94\x18\x8e\x64\xd8\x90\x18\xa3\xa8\x3d\x1e\xff\xc6\x9e\xa8\x0e\x3c\x5e\x65\xa9\x1b\x9b\xef\xde\x9d\xed\x55\x96\x7e\x5f\xc9\xf2\xd8\xe0\x90\x46\x86\xe9\xa6\xd4\x98\xc0\x44\x8f\xe8\x96\xb8\xe6\xe7\xde\x2f\xac\xa4\xb3\x73\x1f\x29\x13\x82\x82\x2e\xe0\x91\x74\x22\xfe\xfb\x12\x2b\x8c\x3d\xa3\xbe\x46\xcb\xd2\x57\x15\xc5\xea\xc9\x26\x8e\xb6\xdb\xf4\x75\xc5\x4a\x52\x6d\x9a\x26\x4a\xd2\xa7\xa8\x72\x6f\x0f\x9b\x9f\xe3\x6f\x92\x1d\x17\x55\xbd\x8b\xfa\xda\x83\xa6\xc3\xc3\xc7\x3e\x46\xd4\x35\x87\x33\xf8\xbe\x7f\x67\xa5\x65\xf0\x67\xf3\xa6\xcd\xfb\x95\xbc\x51\xe3\xa2\xf0\x1f\xc6\xff\x8e\x75\x75\xeb\xe6\x14\x0b\xac\xc0\x70\x4a\x2f\xb8\x54\x18\xbb\x09\x76\xe0\x25\xde\xba\x33\xa9\x60\xea\x34\xc4\x3b\xd7\xd9\x64\xa7\xdf\x9e\x68\x4c\xb3\x7a\xe3\x4e\xf1\xee\xba\x9c\x1d\x8f\x05\xde\xcc\x9f\x9a\xd8\xc2\xc1\x05\xbf\x55\xe2\x4d\x4e\x26\x8f\x95\x1c\xef\xf4\x9c\xd2\x6a\x3e\x84\x92\xce\x0f\xfc\xfe\x8d\x0c\x0b\x83\x9f\x87\x8f\xbe\xbb\x1c\x80\x8a\x2f\xa4\x2f\x64\x2d\x34\x68\xa9\x09\x07\x59\x1c\x0f\x2b\xf7\xa8\xac\xed\x12\x0f\x46\x16\x27\x22\x13\xfa\x81\xf0\x10\xe5\x56\x9c\xaf\x93\xe8\xff\x18\x04\x3e\xc7\x88\x9e\xec\xf4\xee\x13\xe6\xbb\x71\xf3\xc8\x6e\xfd\x47\xf3\x78\x5b\x9a\xec\xed\x16\x3f\x9a\xc7\x9b\x25\xf6\x3b\xbc\xed\xb4\x16\x20\x8b\x42\xa1\x76\xde\xfc\x71\xb2\xab\xef\xb1\xbe\x64\xd7\x4f\x91\x5d\xdb\x9e\xdd\x36\xe1\x7f\x33\xbd\xd2\x6f\xbf\xf9\xa7\xfb\x34\xee\x7d\x92\x3e\xbe\xd1\x06\xe4\x0a\xef\xcc\xe7\xc3\x56\xdc\x4b\xe7\x7d\xec\xbb\xfe\xdc\xd0\xd0\xbf\xb2\xa3\xb1\x7b\xd9\x35\xef\x7f\x18\x38\xf9\x04\x79\xdd\xf4\x3c\xf7\xaf\x4c\x4e\x8f\x2e\x4d\x3e\xcb\xb2\x61\x4a\xc3\xf1\xd9\xc2\x0c\xe1\xe4\x6d\x92\x17\xf4\x2e\x66\x9f\x73\xfe\x3b\x43\xf6\x39\xe7\x13\x88\xfd\x05\xa9\xff\x08\x48\xfd\xdd\x08\x09\xf7\x20\xe7\x17\x1c\xfc\x82\x83\x9f\x35\x0e\xfa\x63\x2c\xa6\xda\x4f\xfa\x0c\xe6\xdd\x81\xc2\x87\x21\xa1\x5b\xe3\x03\x2e\x97\x3f\xac\x9d\x1b\x5f\x40\x0f\xae\x4d\x2c\xb3\xbd\x57\x26\x41\xbd\x07\x09\x9d\xd8\x03\x24\xac\xb3\xd4\xab\x72\x24\xb4\xd9\xf3\x6c\xbb\x89\xf3\x77\xd2\x3b\xb7\x17\x3b\x57\x17\xaa\xbd\xb7\xe8\xce\x8b\x8f\xfc\xe4\xe3\xad\x65\xd9\x1d\x21\xdb\x5b\x00\xa1\x99\xa8\xd1\x9f\xe5\x1f\xc9\x73\xe7\xb3\x8c\x8e\x6d\xcb\xd5\x74\x5d\x58\x98\x34\xe1\x8e\x34\x5f\x15\x46\xb5\x24\x7d\xae\xfe\x83\x95\xf4\xc1\x3c\x5a\xbc\xbb\x4d\xe8\xad\xd4\xb9\x7a\x37\xb4\x80\x3a\x4b\xcf\x95\x62\x2b\x11\xf7\xc6\x49\x9c\x23\x7b\xcb\xd8\x40\xeb\x36\xb9\x9b\x7a\xf0\x6e\x6c\xb9\x04\x8a\x84\x77\xdf\x6f\xb1\x12\xed\xc1\xf4\xb1\x72\x44\xed\x67\x5c\xd1\x62\x70\x82\x9d\x38\x07\x79\x83\xba\x9f\xe5\xf0\xf7\xd3\x24\xb8\x7a\x94\xe0\xea\xf9\x1e\xbf\x3e\xf6\x26\xf6\x41\xa9\x64\x7c\xf3\xfa\x4f\x79\xa3\xce\x8b\x02\x73\x8d\xfd\xcd\xeb\x53\xe4\xa8\xf1\xf7\x00\x1e\xc7\xf9\xe3\x1d\x14\x7d\x08\xb2\xd0\x3d\xc8\xe2\xe4\x1a\x20\x0b\xcd\x52\x37\xf6\xf9\x15\x4e\x74\xe4\x57\x74\xde\xaf\xe8\x67\xe1\x57\xc6\xb1\x06\xe5\x93\xfd\x10\xc5\xdd\x51\xdb\x47\x66\xcb\x29\xbd\xb1\x1f\xa2\xf4\x5f\x51\x83\x2c\x2c\x55\x5e\x57\x95\xb1\x82\xff\x80\x0c\x8e\x77\xb9\xc1\x9a\xb1\xff\xf8\x69\x5c\xe3\xf9\xeb\x37\xef\xfa\x4c\xd9\xef\x16\x07\xef\x07\x1f\x98\xfe\xde\xb2\xde\x5d\xfd\x90\xc8\x05\xe1\x0a\xbb\x8f\x3a\x8f\xca\xf9\x0a\x2f\xa4\x10\x31\xcd\xda\x6f\x92\x3b\xd6\x34\x03\xe3\x25\xf7\x62\x77\xc1\xa5\x70\x0c\x13\x18\xf2\xf4\xbe\xe2\xbd\xc1\xf0\x0e\x9b\xf0\x7f\x01\x00\x00\xff\xff\xb0\x00\xc9\xa3\xd8\x30\x00\x00"

func tableTplBytes() ([]byte, error) {
	return bindataRead(
		_tableTpl,
		"table.tpl",
	)
}

func tableTpl() (*asset, error) {
	bytes, err := tableTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "table.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conds.tpl": condsTpl,
	"dao.tpl":   daoTpl,
	"table.tpl": tableTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conds.tpl": &bintree{condsTpl, map[string]*bintree{}},
	"dao.tpl":   &bintree{daoTpl, map[string]*bintree{}},
	"table.tpl": &bintree{tableTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
